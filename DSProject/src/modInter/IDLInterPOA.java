package modInter;


/**
* modInter/IDLInterPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from IDL.idl
* Friday, November 30, 2018 8:16:08 PM EST
*/

public abstract class IDLInterPOA extends org.omg.PortableServer.Servant
 implements modInter.IDLInterOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("receiveAndForwardRequest", new java.lang.Integer (0));
    _methods.put ("startReceiving", new java.lang.Integer (1));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // modInter/IDLInter/receiveAndForwardRequest
       {
         String courseID = in.read_string ();
         String semester = in.read_string ();
         int capacity = in.read_long ();
         String userID = in.read_string ();
         String studentID = in.read_string ();
         String oldCourseID = in.read_string ();
         String newCourseID = in.read_string ();
         int operationID = in.read_long ();
         int sequenceID = in.read_long ();
         String department = in.read_string ();
         String error = in.read_string ();
         String replicaNumber = in.read_string ();
         boolean ack = in.read_boolean ();
         String $result = null;
         $result = this.receiveAndForwardRequest (courseID, semester, capacity, userID, studentID, oldCourseID, newCourseID, operationID, sequenceID, department, error, replicaNumber, ack);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // modInter/IDLInter/startReceiving
       {
         String strReply = in.read_string ();
         int port = in.read_long ();
         String whichReplica = in.read_string ();
         this.startReceiving (strReply, port, whichReplica);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:modInter/IDLInter:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public IDLInter _this() 
  {
    return IDLInterHelper.narrow(
    super._this_object());
  }

  public IDLInter _this(org.omg.CORBA.ORB orb) 
  {
    return IDLInterHelper.narrow(
    super._this_object(orb));
  }


} // class IDLInterPOA
